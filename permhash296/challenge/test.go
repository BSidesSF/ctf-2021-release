package main

import (
    "permhash296"
	"encoding/hex"
	"math/big"
	"fmt"
)


func hex_to_bytes(s string) []byte {
	b, _ := hex.DecodeString(s);

	return b
}


func frombinary(s *permhash296.Permhash296, bin []byte) {

	pint := new(big.Int).SetBytes(bin)

	nv := make([]int, permhash296.N)
	for i := 0; i < permhash296.N; i++ {
		nv[i] = i;
	}

	fact := big.NewInt(1)
	for i := 2; i < permhash296.N; i++ {
		fact.Mul(fact, big.NewInt(int64(i)))
	}

	for i := permhash296.N; i > 1; i-- {
		var q, r big.Int
		q.DivMod(pint, fact, &r)

		qint := q.Int64()

		s.State[permhash296.N - i] = nv[qint]
		nv = append(nv[:qint], nv[qint + 1:]...)

		fact.Div(fact, big.NewInt(int64(i - 1)))
		pint.Set(&r)
	}

	s.State[permhash296.N - 1] = nv[0]

}



func main() {

	//var State [permhash296.N]int;
	var phash permhash296.Permhash296
	var nphash permhash296.Permhash296

	fmt.Printf("\"%s\" -> %s\n", "", phash.Hash_hex([]byte("")))
	fmt.Printf("\"%s\" -> %s\n", "0x456456", phash.Hash_hex(hex_to_bytes("456456")))
	fmt.Printf("\"%s\" -> %s\n", "0x6666666666666666666666666666666666666666", phash.Hash_hex(hex_to_bytes("6666666666666666666666666666666666666666")))
	fmt.Printf("\"%s\" -> %s\n", "0x233233", phash.Hash_hex(hex_to_bytes("233233")))
	fmt.Printf("\"%s\" -> %s\n", "0", phash.Hash_hex([]byte("0")))
	fmt.Printf("\"%s\" -> %s\n", "1", phash.Hash_hex([]byte("1")))

	for i := 0; i < permhash296.N; i++ {
		phash.State[i] = (permhash296.N - 1) - i;
	}

	phash.Hash_hex(hex_to_bytes("00112233"))
	fmt.Printf("phash State: %v\n", phash.State)
	phash_bin := phash.Tobinary()
	frombinary(&nphash, phash_bin)
	fmt.Printf("nphash State: %v\n", nphash.State)

	fmt.Printf("test: %s\n", phash.Hash_hex(hex_to_bytes
	fmt.Printf("phash State: %v\n", phash.State)


	frombinary(&nphash, hex_to_bytes("3c1f51683eb8d11bba9623eb2391e331bf095dee69dd7137625a7bf83980a279d9f68a54cb"))
	fmt.Printf("State from hash: %v\n", nphash.State)

	nphash.State = [...]int {55, 49, 7, 3, 54, 63, 0, 28, 33, 42, 16, 26, 44, 1, 20, 22, 29, 11, 56, 32, 5, 36, 23, 50, 51, 8, 62, 6, 10, 12, 60, 17, 58, 34, 47, 57, 19, 18, 45, 52, 27, 46, 48, 61, 41, 38, 31, 4, 37, 35, 24, 53, 9, 40, 59, 25, 43, 39, 15, 13, 14, 21, 2, 30}
	nphash_bin := nphash.Tobinary()
	fmt.Printf("hash from new state: %s\n", hex.EncodeToString(nphash_bin))

	phash.Init()
	phash.Update(hex_to_bytes("3cf559db9f228742b050661ed8115d5c6bffb644"))
	fmt.Printf("Intermediate state 1: %v\n", phash.State)

	phash.Init()
	phash.Update(hex_to_bytes("993ed42a5196e579deead9e747e87a904fa6a373"))
	fmt.Printf("Intermediate state 2: %v\n", phash.State)
}
